pragma solidity ^0.5;

import './SafeMath.sol';

contract NewfangDIDRegistry {
    using SafeMath for uint;

    // keccak256(UEB) => bytes32 newfang-specific-idstring
    mapping(bytes32 => address) public owners; // file owners
    mapping(bytes32 => mapping(bytes32 => mapping(address => ACK))) public accessSpecifier;
    mapping(address => uint) public changed;
    mapping(address => uint) public nonce;
    address public owner;

    struct ACK {
        bytes32 encrypted_key;
        uint256 validity;
    }

    constructor () public {
        owner = msg.sender;
    }

    /**
    * @dev This function will be used by createDID pubic function and createDIDSigned
    * @return bool
    */
    function createDID(bytes32 _id, address _identity) internal returns(bool){
        require(owners[_id] == address(0), "Owner already exist for this file");
        owners[_id] = _identity;
        return true;
    }

    /**
    * @dev _id will be the file index which is generated by newfang SDK on client side.
    * @return bool
    */
    function createDID(bytes32 _id) public returns(bool){
        return createDID(_id, msg.sender);
    }
}
